{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundary.js","Components/CouterButton.js","Components/Header.js","Components/MainPage/MainPage.js","Containers/App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","cardComponent","robots","map","user","index","key","username","SearchBox","searchField","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","errror","info","this","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","MainPage","filterRobots","filter","robot","toLowerCase","includes","onRequestRobots","onSearchChange","isPending","App","connect","searchRobots","requestRobot","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","createLogger","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.41b6d236.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Card = ({name, email, id}) => {\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img src={`https://robohash.org/${id}?size=200x200`} alt='robot friend icon'/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\n    const cardComponent = robots.map((user, index) => {\n        return (\n            <Card \n                key={user.id} \n                id={user.id} \n                name={user.name} \n                email={user.email} \n                username={user.username}\n            />\n        )\n    })\n\n    return (\n        <div>\n            {cardComponent}\n        </div>\n    );\n}\n\n\nexport default CardList;","import React from 'react';\n\n\n\nconst SearchBox = ({ searchField, searchChange }) => {\n\n    return (\n        <div className='pa2'>\n            <input\n                aria-label=\"Search Box\"\n                className='pa3 ba b--green bg-lightest-blue'\n                type='search'\n                placeholder='search robot'\n                onChange={searchChange}\n            />\n        </div>\n    )\n\n}\n\n\nexport default SearchBox;","import React from 'react';\n\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    )\n}\n\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            hasError: false,\n        }\n    }\n\n\n    componentDidCatch(errror, info) {\n        this.setState({\n            hasError: true\n        })\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return (\n                <h1>\n                    Oops, not a good error for user to see......\n                </h1>\n            )\n        }\n\n        return (\n\n            this.props.children\n        )\n    }\n}\n\n\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            count: 0\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (this.state.count !== nextState.count) {\n            return true;\n        }\n        return false;\n    }\n\n    updateCount = () => { \n        this.setState(state => {\n            return {count: this.state.count + 1}\n        })\n    }\n    render() {\n        return (\n            <button id=\"counter\" color={this.props.color} onClick={this.updateCount}>\n                Count: {this.state.count}\n            </button>\n        )\n    }\n   \n}\n\nexport default CounterButton;","import React, { Component } from 'react';\nimport CounterButton from './CouterButton';\n\nclass Header extends Component {\n\n    // shouldComponentUpdate(nextProps, nextState) {\n    //     return false;\n    // }\n\n    render() {\n        return (\n            <div>\n                <h1 className='f1'>Robo Friends</h1>\n                <CounterButton color={'red'} />\n            </div>\n        )\n    }\n   \n}\n\nexport default Header;","import React, { Component } from 'react';\nimport CardList from '../CardList';\nimport SearchBox from '../SearchBox';\nimport Scroll from '../Scroll'\nimport ErrorBoundary from '../ErrorBoundary'\nimport Header from '../Header';\n\nimport './MainPage.css'\n\nclass MainPage extends Component {\n\n    componentDidMount() {\n        this.props.onRequestRobots()\n    }\n\n    filterRobots = () => {\n        return this.props.robots.filter(robot => {\n            return robot.name.toLowerCase().includes(this.props.searchField.toLowerCase())\n        })\n    }\n    render() {\n        const { onSearchChange, isPending } = this.props;\n        return !isPending ? \n            (\n                <div className='tc'>\n                    <h1 className='f1'>Loading</h1>\n                </div>\n            )\n        : \n            (\n                <div className='tc'>\n                    <Header/>\n                    <SearchBox searchChange={onSearchChange}/>\n                    <Scroll>\n                        < ErrorBoundary>\n                            <CardList robots={this.filterRobots()}/>\n                        </ErrorBoundary>\n                    </Scroll>\n                </div>\n            )\n    }\n}\n\nexport default MainPage;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nimport MainPage from '../Components/MainPage/MainPage';\n\n\n\nconst mapStateToProps = (state) => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobot.robots,\n        isPending: state.requestRobot.isPending,\n        error: state.requestRobot.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends Component {\n\n    render() {\n        return (\n            <MainPage {...this.props}/> \n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED, } from './constants'\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({\n        type: REQUEST_ROBOTS_PENDING\n    });\n    fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n            .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\n\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\n\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n} from './constants'\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD: \n            return Object.assign({}, state, {searchField: action.payload});\n\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobot = (state = initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING: \n            return Object.assign({}, state, { isPending: true });\n        \n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {robots: action.payload, isPending: true});\n\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, {error: action.payload, isPending: false});\n\n        default:\n            return state;\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider, } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './Containers/App';\nimport 'tachyons';\nimport { searchRobots, requestRobot } from './reducers';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootReducer = combineReducers({searchRobots, requestRobot})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, createLogger()))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}